export enum NotificationType {
	DAILY_REWARD = 'daily_reward',
	STREAK_RISK = 'streak_risk',
	TASK_PROGRESS = 'task_progress',
	ACHIEVEMENT = 'achievement',
	POINTS_MILESTONE = 'points_milestone',
	NEW_GAME = 'new_game',
	WEEKLY_STATS = 'weekly_stats',
	GAME_RECOMMENDATION = 'game_recommendation'
}

export interface PlayerContext {
	userName: string;
	currentStreak: number;
	totalPoints: number;
	earnedToday: number;
	totalGamesPlayed: number;
	sessionCount: number;
	lastActiveDate: string | null;
	availableTasks: number;
	completedTasks: number;
	nextReward?: { day: number; amount: number };
	favoriteGame?: string;
}

interface NotificationContent {
	type: NotificationType;
	priority: number;
	title: string;
	message: string;
	emoji: string;
}

function generateDailyRewardNotification(ctx: PlayerContext): NotificationContent {
	const streakBonus = ctx.currentStreak > 3 ? ' üî•' : '';
	return {
		type: NotificationType.DAILY_REWARD,
		priority: 10,
		emoji: 'üéÅ',
		title: `${ctx.userName}, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥—ë—Ç!${streakBonus}`,
		message: `<b>–î–µ–Ω—å ${ctx.currentStreak}</b> ‚Äî –ø–æ–ª—É—á–∏ <b>+${ctx.nextReward?.amount || 100} –±–∞–ª–ª–æ–≤</b>\n–¢–≤–æ—è —Å–µ—Ä–∏—è: <b>${ctx.currentStreak} ${ctx.currentStreak === 1 ? '–¥–µ–Ω—å' : ctx.currentStreak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}</b> –ø–æ–¥—Ä—è–¥!`
	};
}

function generateStreakRiskNotification(ctx: PlayerContext): NotificationContent {
	return {
		type: NotificationType.STREAK_RISK,
		priority: 9,
		emoji: 'üî•',
		title: `–ù–µ –ø–æ—Ç–µ—Ä—è–π —Å–µ—Ä–∏—é –≤ ${ctx.currentStreak} ${ctx.currentStreak === 1 ? '–¥–µ–Ω—å' : ctx.currentStreak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}!`,
		message: `<b>${ctx.userName}</b>, —Ç–≤–æ—è —Å–µ—Ä–∏—è –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π!\n–ó–∞—Ö–æ–¥–∏ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ <b>–î–µ–Ω—å ${ctx.currentStreak}</b>`
	};
}

function generateTaskProgressNotification(ctx: PlayerContext): NotificationContent {
	return {
		type: NotificationType.TASK_PROGRESS,
		priority: 7,
		emoji: '‚ö°',
		title: '–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!',
		message: `<b>${ctx.availableTasks} ${ctx.availableTasks === 1 ? '–∑–∞–¥–∞–Ω–∏–µ' : ctx.availableTasks < 5 ? '–∑–∞–¥–∞–Ω–∏—è' : '–∑–∞–¥–∞–Ω–∏–π'}</b> –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>${ctx.completedTasks}</b> üéØ`
	};
}

function generatePointsMilestoneNotification(ctx: PlayerContext): NotificationContent {
	const nextMilestone = Math.ceil(ctx.totalPoints / 10000) * 10000;
	const toGo = nextMilestone - ctx.totalPoints;

	return {
		type: NotificationType.POINTS_MILESTONE,
		priority: 6,
		emoji: 'üíé',
		title: `–î–æ ${nextMilestone.toLocaleString()} –±–∞–ª–ª–æ–≤ ‚Äî –≤—Å–µ–≥–æ ${toGo.toLocaleString()}!`,
		message: `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>${ctx.totalPoints.toLocaleString()} –±–∞–ª–ª–æ–≤</b>\n–°–µ–≥–æ–¥–Ω—è –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>+${ctx.earnedToday}</b> üìà`
	};
}

function generateAchievementNotification(ctx: PlayerContext): NotificationContent {
	const achievements = [
		{ threshold: 5, title: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä–æ–∫', emoji: 'üéÆ' },
		{ threshold: 10, title: '–û–ø—ã—Ç–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä', emoji: 'üìä' },
		{ threshold: 20, title: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç', emoji: 'üíº' },
		{ threshold: 50, title: '–ú–∞—Å—Ç–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤', emoji: 'üëë' }
	];

	const current = achievements.find(a => ctx.totalGamesPlayed >= a.threshold);
	const next = achievements.find(a => a.threshold > ctx.totalGamesPlayed);

	if (next) {
		const toGo = next.threshold - ctx.totalGamesPlayed;
		return {
			type: NotificationType.ACHIEVEMENT,
			priority: 5,
			emoji: next.emoji,
			title: `–î–æ –∑–≤–∞–Ω–∏—è "${next.title}" ‚Äî ${toGo} ${toGo === 1 ? '–∏–≥—Ä–∞' : toGo < 5 ? '–∏–≥—Ä—ã' : '–∏–≥—Ä'}!`,
			message: `–ü—Ä–æ–π–¥–µ–Ω–æ –∏–≥—Ä: <b>${ctx.totalGamesPlayed}</b>\n–¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ: <b>${current?.title || '–ù–æ–≤–∏—á–æ–∫'}</b> ${current?.emoji || 'üåü'}`
		};
	}

	return {
		type: NotificationType.ACHIEVEMENT,
		priority: 8,
		emoji: 'üèÜ',
		title: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!`,
		message: `–ü–æ–ª—É—á–µ–Ω–æ –∑–≤–∞–Ω–∏–µ: <b>"${current?.title || '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—É—Ä—É'}"</b> ${current?.emoji || 'üëë'}\n–ò–≥—Ä –ø—Ä–æ–π–¥–µ–Ω–æ: <b>${ctx.totalGamesPlayed}</b>`
	};
}

function generateGameRecommendationNotification(ctx: PlayerContext): NotificationContent {
	const games = [
		{ name: '–©–∏—Ç –∏ –†—É–±–ª—å', desc: '–ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤', emoji: 'üõ°Ô∏è' },
		{ name: '–§–∏–Ω–°–∏—Ç–∏', desc: '–ü–æ—Å—Ç—Ä–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–º–ø–µ—Ä–∏—é', emoji: 'üèôÔ∏è' },
		{ name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ê–∫—Ç–∏–≤–æ–≤', desc: '–ì–∏—Ä–æ—Å–∫–æ–ø-–ª–∞–±–∏—Ä–∏–Ω—Ç', emoji: 'üéØ' },
		{ name: '–ó–æ–ª–æ—Ç–æ–π –ó–∞–ø–∞—Å', desc: 'Match-3 –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', emoji: 'üí∞' }
	];

	const game = games[Math.floor(Math.random() * games.length)];

	return {
		type: NotificationType.GAME_RECOMMENDATION,
		priority: 4,
		emoji: game.emoji,
		title: `–ü–æ–ø—Ä–æ–±—É–π "${game.name}"!`,
		message: `${game.desc}\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: <b>5-10 –º–∏–Ω—É—Ç</b> ‚è±Ô∏è`
	};
}

function generateWeeklyStatsNotification(ctx: PlayerContext): NotificationContent {
	return {
		type: NotificationType.WEEKLY_STATS,
		priority: 3,
		emoji: 'üìä',
		title: '–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é',
		message: `<b>–í–∏–∑–∏—Ç–æ–≤:</b> ${ctx.sessionCount}\n<b>–ò–≥—Ä –ø—Ä–æ–π–¥–µ–Ω–æ:</b> ${ctx.totalGamesPlayed}\n<b>–ë–∞–ª–ª–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> ${ctx.totalPoints.toLocaleString()}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`
	};
}

export function getDemoNotificationMessage(
	userName: string,
	context?: Partial<PlayerContext>
): string {
	const ctx: PlayerContext = {
		userName,
		currentStreak: context?.currentStreak || 3,
		totalPoints: context?.totalPoints || 15420,
		earnedToday: context?.earnedToday || 250,
		totalGamesPlayed: context?.totalGamesPlayed || 12,
		sessionCount: context?.sessionCount || 8,
		lastActiveDate: context?.lastActiveDate || new Date().toISOString(),
		availableTasks: context?.availableTasks || 5,
		completedTasks: context?.completedTasks || 3,
		nextReward: context?.nextReward || { day: 4, amount: 500 },
		favoriteGame: context?.favoriteGame || '–§–∏–Ω–°–∏—Ç–∏'
	};

	const notifications: NotificationContent[] = [
		generateDailyRewardNotification(ctx),
		generateStreakRiskNotification(ctx),
		generateTaskProgressNotification(ctx),
		generatePointsMilestoneNotification(ctx),
		generateAchievementNotification(ctx),
		generateGameRecommendationNotification(ctx)
	];

	notifications.sort((a, b) => b.priority - a.priority);

	const primary = notifications[0];
	const secondary = notifications.slice(1, 3);

	let message = `<b>${primary.emoji} ${primary.title}</b>\n\n${primary.message}\n\n`;

	message += `<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>\n\n`;

	secondary.forEach(notif => {
		message += `<b>${notif.emoji} ${notif.title}</b>\n${notif.message}\n\n`;
	});

	message += `<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>\n\n`;
	message += `üí° <i>–ò–≥—Ä–∞–π, —É—á–∏—Å—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã!</i>\n`;
	message += `üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –¶–µ–Ω—Ç—Ä –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞</b>`;

	return message;
}